{"mappings":"YAY4C,IAAtCA,EAAUC,SAASC,cAAc,SAEvC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAACH,WAAUC,UAGnBG,EAAO,CAACJ,WAAUC,S,GAEnBA,E,IAIPL,EAAQY,iBAAiB,UAAU,SAACC,GAClCA,EAAMC,iBAQN,IAPA,IAAMC,EAAQC,OAAOhB,EAAQiB,SAASZ,MAAMa,OACtCC,EAAOH,OAAOhB,EAAQiB,SAASE,KAAKD,OACpCE,EAASJ,OAAOhB,EAAQiB,SAASG,OAAOF,OAE1CG,EAAW,EAGPC,EAAI,EAAGA,GAAKF,EAAQE,GAAK,EAG/BC,cAAgBR,EAAQI,EAExBhB,EAJAkB,GAAYC,EAIYC,cACzBC,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBqB,QAAQC,IAAI,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAE3DwB,OAAM,SAAAJ,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBqB,QAAQC,IAAI,sBAAqCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["// Користувач буде вводити першу затримку в мілісекундах, крок збільшення затримки для кожного промісу \n// після першого і кількість промісів, яку необхідно створити.\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay)\n// стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу\n// (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або\n// відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position\n// і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що\n// потрібно зробити з промісом - виконати або відхилити.\n\nconst formRef = document.querySelector('.form');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({position, delay});\n      } \n      else {\n        reject({position, delay});\n      }\n    }, delay);\n  });\n}\n\nformRef.addEventListener('submit', (event) => {\n  event.preventDefault();\n  const delay = Number(formRef.elements.delay.value);\n  const step = Number(formRef.elements.step.value);\n  const amount = Number(formRef.elements.amount.value);\n\n  let position = 0;\n  \n  \n  for(let i = 1; i <= amount; i += 1) {\n    position += i;\n\n    promiseDelay += delay + step;\n    \n    createPromise(position, promiseDelay)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n  }\n});\n\n\n"],"names":["$ce04d3a99e08e73b$var$formRef","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","delay1","Number","elements","value","step","amount","position1","i","promiseDelay","then","param","console","log","concat","catch"],"version":3,"file":"03-promises.04b276c6.js.map"}