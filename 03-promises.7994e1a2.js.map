{"mappings":"YAsCA,SAASA,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,QAAO,SAACC,EAASC,GAC1B,IAAMC,EAAgBC,KAAKC,SAAW,GAGtCC,YAAW,WACLH,EACFF,EAAQ,CAACH,WAAUC,UAGnBG,EAAO,Q,GAERH,E,IAtCSQ,SAASC,cAAc,SAE/BC,iBAAiB,UAAU,SAACC,GAQlC,IAPA,IAEuBC,EAAnBD,EAAME,cADRC,SAAYC,EAAKH,EAALZ,MAAagB,GAAFJ,EAAJK,KAAYL,EAANI,QAGvBE,EAAW,EAGPC,EAAI,EAAGA,GAAKH,EAAQG,GAAK,EAK/BrB,EAJAoB,GAAYC,EAIYJ,GACzBK,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBsB,QAAQC,IAAI,uBAAwCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAE3DyB,OAAM,SAAAJ,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBsB,QAAQC,IAAI,sBAAqCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["// Користувач буде вводити першу затримку в мілісекундах, крок збільшення затримки для кожного промісу \n// після першого і кількість промісів, яку необхідно створити.\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay)\n// стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу\n// (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або\n// відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position\n// і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що\n// потрібно зробити з промісом - виконати або відхилити.\n\nconst formRef = document.querySelector('.form');\n\nformRef.addEventListener('submit', (event) => {\n  const {\n    elements: { delay, step, amount }\n  } = event.currentTarget;\n\n  let position = 0;\n  \n\n  for(let i = 0; i <= amount; i += 1) {\n    position += i;\n    \n\n\n    createPromise(position, delay)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n  }\n});\n\n\nfunction createPromise(position, delay) {\n  return new Promis((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    \n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } \n      else {\n        reject(\"error\");\n      }\n    }, delay);\n  });\n}\n\n\n"],"names":["$ce04d3a99e08e73b$var$createPromise","position","delay","Promis","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","_elements","currentTarget","elements","delay1","amount","step","position1","i","then","param","console","log","concat","catch"],"version":3,"file":"03-promises.7994e1a2.js.map"}